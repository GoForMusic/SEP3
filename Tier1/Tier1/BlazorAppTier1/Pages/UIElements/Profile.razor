@namespace BlazorAppTier1.Pages.UIElements
@using Entities.Models
@using BlazorAppTier1.Pages.PostPage
@using Contracts
@using System.Runtime.CompilerServices
@inject IPostService _postService 
@inject IUserService _userService;
@inject NavigationManager _navigationManager


<div class="container emp-profile">
    <form method="post">
        <div class="row">
            <div class="col-md-6">
                <div class="profile-head">
                    <h5>
                        @User.GetName()
                    </h5>
                    <h6>
                        @User.Username
                    </h6>
                    <p class="profile-rating">RANKINGS : <span>8/10</span></p>
                </div>
            </div>
            <AuthorizeView>
                <Authorized>
                    @if (context.User.Identity!.Name!.Equals(User.Username)) {
                        <div class="col-md-2">
                            <input type="submit" class="profile-edit-btn" name="btnAddMore" value="Edit Profile"/>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>

        </div>
        <div class="row">
            <div class="col-md-8">

                <div class="row">
                    <div class="col-md-6">
                        <label>User name </label>
                    </div>
                    <div class="col-md-6">
                        <p>@User.Username</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>First name</label>
                    </div>
                    <div class="col-md-6">
                        <p>@User.FirstName</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>Last name</label>
                    </div>
                    <div class="col-md-6">
                        <p>@User.LastName</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>Total active posts :</label>
                    </div>
                    <div class="col-md-6">
                        <p> @_totalNumberOfPosts</p>
                    </div>
                </div>
            </div>
            <AuthorizeView Policy="Admin">
                <button @onclick="@(() => _showBlockModal = true)">Block User </button>


            </AuthorizeView>
            @if (_showBlockModal) {
                <Modal>
                    <input type="text" placeholder="Enter reason to block" @bind="_block.Reason"/>
                    <br/>
                    <button @onclick="BlockUser"> Confirm blocking</button>
                </Modal>
            }

            <br/>
            <br/>

            <hr/>
            <br/>
            <br/>
            <div class="allPosts">
                @if (_postsToShow == null) {
                    <LoadingComponent message=" posts. Please wait.."></LoadingComponent>
                }
                else {
                    <PostList postToShow="_postsToShow"/>
                }

            </div>
        </div>
    </form>
</div>
@if (!(string.IsNullOrEmpty(_errorLabel))) {
    <Modal>
        <p> @_errorLabel</p>
        <button @onclick="Proceed"> Okay</button>
    </Modal>
}


@code {

    [Parameter]
    public User User { get; set; }

    private List<Post>? _postsToShow;
    private int _totalNumberOfPosts;
    private string? _errorLabel;
    private bool _showBlockModal;

    private Block _block;


    protected override async Task OnInitializedAsync() {
        try {
            await GetTotalNumberOfPostByUsername();
            await GetAllPostsByUsername();
        }
        catch (Exception e) {
            _errorLabel = e.Message;
            Console.WriteLine(e.Message);
        }
    }


    private async Task GetTotalNumberOfPostByUsername() {
        _totalNumberOfPosts = await _postService.GetTotalNumberOfPostsByUsername(User.Username);
    }

    private async Task GetAllPostsByUsername() {
        _postsToShow = await _postService.GetAllPostsByUsername(User.Username);
    }

    private void Proceed() {
        _errorLabel = string.Empty;
    }

    private void RedirectToPostDetails(int postId) {
        _navigationManager.NavigateTo($"/PostDetails/{postId}");
    }

    private async Task BlockUser() {
        if (string.IsNullOrEmpty(_block.Reason)) {
            return;
        }
        await _userService.BlockUser(_block);
        _showBlockModal = false;
    }


}