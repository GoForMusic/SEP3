@page "/"
@page "/{CurrentPage:int}"
@using Contracts
@using Entities.Models
@using BlazorAppTier1.Pages.UIElements

@inject IPostService _postService;
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<br/>
<br/>
<br/>


<div id="body">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.1/css/all.min.css" integrity="sha256-2XFplPlrFClt0bIdPgpz8H7ojnk10H69xRqd9+uTShA=" crossorigin="anonymous"/>

    <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <div class="sidebar">
                    <div class="widget border-0">
                        <SearchBar Callback="(s) => SearchPosts(s)"> </SearchBar>

                    </div>


                    <!--All reset posts view-->
                    <div class="widget">
                        <div class="widget-title widget-collapse">
                            @* <input type="radio" name="radiobutton" class="custom-control-input" id="dateposted1" @onclick="@(() => postsFilteredBySubcategory(""))"> *@
                            <label class="custom-control-label" for="dateposted1"> Reset Filter</label>
                        </div>
                    </div>

                    @if (allCategories == null) {
                        <p> Loading categories</p>
                    }
                    else {
                        @foreach (var category in allCategories) {
                            <div class="widget">
                                <div class="widget-title widget-collapse">
                                    <h6>@category.Name</h6>
                                    <a class="ml-auto" data-toggle="collapse" data-bs-target="#dateposted" role="button" aria-expanded="false" aria-controls="dateposted">
                                        <i class="fas fa-chevron-down"></i>
                                    </a>
                                </div>
                                <div class="collapse show" id="dateposted">
                                    <div class="widget-content">

                                        @foreach (var subcategory in category.Subcategories) {
                                            <div class="custom-control custom-checkbox">
                                                @* <input type="radio" name="radiobutton" class="custom-control-input" id="dateposted1" @onclick="@(() => postsFilteredBySubcategory(subcategory.Name))"> *@
                                                <label class="custom-control-label" for="dateposted1">@subcategory.Name</label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }

                </div>
            </div>
            <!--Right side-->
            <div class="col-lg-9">
                <div class="row">

                    @if (postToShow == null) {
                        <p> Loading posts...</p>
                    }
                    else {
@foreach (var post in postToShow) {
    <div class="col-sm-6 col-lg-4 mb-4">
        <div class="candidate-list candidate-grid">
            <div class="candidate-list-image">
                <img class="img-fluid" src="@post.Images" alt="">
            </div>
            <div class="candidate-list-details">
                <div class="candidate-list-info">
                    <div class="candidate-list-title">
                        <h5>
                            <a href="#" @onclick="@(() => Navigation.NavigateTo("/PostDetails/" + post.Id))">@post.Title</a>
                        </h5>
                    </div>
                    <div class="candidate-list-option">
                        <ul class="list-unstyled">
                            <li>
                                <i class="fas fa-user pr-1"></i>@post.Writer.GetName()
                            </li>
                            <li>
                                <i class="fas fa-map-marker-alt pr-1"></i>@post.Address
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="candidate-list-favourite-time">
                    <a class="candidate-list-favourite order-2" href="#">
                        <i class="far fa-heart"></i>
                    </a>
                    <span class="candidate-list-time order-1">
                        <i class="far fa-clock pr-1"></i>@post.DateCreated.GetDate()
                    </span>
                </div>
            </div>
        </div>
    </div>
}
                    }

                </div>
                <div class="row">
                    <div class="col-12 text-center mt-4 mt-sm-5">
                        <ul class="pagination justify-content-center mb-0">
                            <li class="page-item @backElement">
                                <a class="page-link" href="#" @onclick="@(() => Pagination(CurrentPage - 1))">Prev</a>
                            </li>
                            <li class="page-item @nextElement">
                                <a class="page-link" href="#" @onclick="@((() => Pagination(CurrentPage + 1)))">Next</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code{

    private List<Category>? allCategories;

    // subcategories filter
    private List<Post>? subcategoriesToShow;


    //pagination
    private List<Post>? postToShow;

    [Parameter]
    public int CurrentPage { get; set; }

    private string nextElement = string.Empty;
    private string backElement = string.Empty;
    private Tracker _tracker;
    private string _searchTitle = string.Empty;


    protected override async Task OnInitializedAsync() {
        allCategories = await _postService.GetALlCategoriesAsync();
    //  postToShow = await _postService.GetAllPosts(0);
    // subcategoriesToShow.AddRange(allPosts);
        CurrentPage = 1;
        _tracker = Tracker.ALLPOSTS;
        await Pagination(CurrentPage);
    }

    // private async Task postsFilteredBySubcategory(string filter) {
    //     subcategoriesToShow.Clear();
    //
    //     if (filter.Equals("")) {
    //         subcategoriesToShow.AddRange(allPosts);
    //     }
    //
    //     for (int i = 0; i < allPosts.Count; i++) {
    //         if (allPosts[i].Subcategory.Name.Equals(filter) && allPosts[i] != null) subcategoriesToShow.Add(allPosts[i]);
    //     }
    //
    //
    //   await  Pagination(CurrentPage);
    // }

    private async Task Pagination(int current) {
        int count = 9;
        Navigation.NavigateTo("/" + current);

        switch (_tracker) {
            case Tracker.ALLPOSTS:
                postToShow = await _postService.GetAllPosts(current);
                break;

            case Tracker.SEARCHEDPOSTS:
                postToShow = await _postService.SearchPosts(_searchTitle, current);
                break;
        }

    //   postToShow = subcategoriesToShow.OrderBy(d=>d.Id).Skip((current-1)*count).Take(count).ToList();
        if (current == 1) {
            backElement = "disabled";
        }
        else {
            backElement = String.Empty;
        }

        if (postToShow.Count < count) {
            nextElement = "disabled";
        }
        else if (postToShow.Count == count) {
            nextElement = "enabled";
        }
    }


    private async Task SearchPosts(String titleToSearch) {
        if (string.IsNullOrEmpty(titleToSearch)) {
            return;
        }
        _tracker = Tracker.SEARCHEDPOSTS;
        _searchTitle = titleToSearch;
        await Pagination(CurrentPage);
        
    }


    // private async Task UpdateOwnerFilter(ChangeEventArgs args) {
    //     string value = (string) args.Value;
    //     if (string.IsNullOrEmpty(value)) {
    //         await GetNormal();
    //         return;
    //     }
    //
    //     allPosts.Clear();
    //     allPosts = await _postService.GetPostsByName(value);
    // }

    private enum Tracker {
        ALLPOSTS,
        SEARCHEDPOSTS
    }

}