@using Entities.Models
@using Contracts
@using HttpServices
@namespace BlazorAppTier1.Pages.UIElements 
@inject NavigationManager _navigationManager;  
@inject ICommentService _commentService;   
@inject IUserService _userService;


<div id="body" class="container mt-5 mb-5 ">
    <div class="d-flex justify-content-center row">
        <div class="col-md-8">
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex flex-row align-items-center add-comment p-2 bg-white rounded">
                        <input type="text" class="form-control border-0 no-box-shadow ml-1" placeholder="Comment..." @bind="_comment.Body">
                        <span class="oi oi-eject" style="color: yellowgreen" @onclick="@(() => PostComment(context.User.Identity.Name))"></span>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="p-3 bg-white mt-2 rounded text-center">
                        <h5>Join the community to comment</h5><button class="btn btn-success btn-sm px-3" type="button" @onclick="@(() => NavigateToLogin())">Signup</button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>

            @if (CommentsToShow == null || !CommentsToShow.Any()) {
                <p> No comments yet...</p>
            }
            else {
                @foreach (Comment comment in CommentsToShow) {
                    <div class="p-3 bg-white mt-2 rounded">
                        <div class="row">
                            <div class="d-flex justify-content-between col-10">
                                <div class="d-flex flex-row user">
                                    <span class="oi oi-person " style="color: yellowgreen"></span>
                                    <div class="d-flex flex-column ml-2 ">
                                        <span class="font-weight-bold" style="cursor:pointer;">@comment.Writer.FirstName @comment.Writer.LastName</span>
                                        <span class="day">@comment.DateCreated.GetDate()</span>


                                    </div>
                                </div>
                            </div>
                            <AuthorizeView>
                                <Authorized>
                                    @if (context.User.Identity!.Name!.Equals(comment.Writer.Username)) {
                                        <div class="oi oi-delete col-2" style="color: red" @onclick="@(() => DeleteComment(comment.Id))"> </div>
                                    }
                                </Authorized>
                            </AuthorizeView>


                        </div>

                        <div class="comment-text text-justify ">
                            <p>@comment.Body</p>
                        </div>
                    </div>
                }
            }



        </div>
    </div>
</div>


@code {

    [Parameter]
    public List<Comment>? CommentsToShow { get; set; }

    [Parameter]
    public int postId { get; set; }

    private Comment _comment = new Comment();

    // Just to make that when someone presses the user. it redirects to the profile of that user.
    // for later purposes
    [Parameter]
    public EventCallback<string> PressedUser { get; set; }


    private async Task PostComment(string identityName) {
        DateTime dateTime = DateTime.Today;
        Date date = new Date() {
            Day = dateTime.Day,
            Month = dateTime.Month,
            Year = dateTime.Year
        };

        User user = await _userService.GetUserAsync(identityName);

        _comment.DateCreated = date;
        _comment.Writer = user;

        Comment addComment = await _commentService.AddComment(postId, _comment);
        CommentsToShow!.Add(addComment);
    }


    private async Task DeleteComment(int commentId) {
        Comment comment = await _commentService.DeleteComment(commentId);
        CommentsToShow!.Remove(CommentsToShow!.Find(comment1 => comment1!.Id == comment.Id));     // Removing from the view as well...

    }

    private void NavigateToLogin() {
        _navigationManager.NavigateTo("/Login");
    }

}