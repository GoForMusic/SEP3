@page "/Reports"
    
@using Contracts
@using Entities.Models
@using BlazorAppTier1.Pages.UIElements
@using BlazorAppTier1.Pages.PostPage
@using Report = Entities.Models.Report

@inject IReportService _reportService;
@inject NavigationManager _navigationManager

@attribute [Authorize(Policy = "Admin")]

<h3>Reports</h3>
<br/>
<br/>
<br/>


@if (_reports  == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_reports.Any())
{
    <p>
        <em>No reports</em>
    </p>
}
else
{
    <table class="table" style="background: white">
        <thead>
        <tr>
            <th>Post id</th>
            <th>Reporter Username</th>
            <th>Reason</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Report report in _reports)
        {
            <tr style="cursor: pointer">
                <td @onclick="@(() =>_navigationManager.NavigateTo($"/PostDetails/{report.PostId}") )">@report.PostId</td>
                <td>@report.ReporterUsername</td>
                <td>@report.Reason</td>                     
                
                <td>
                    <label @onclick="@(() => RemoveReport(report))" style="cursor:pointer; color: red; font-weight: bold">&#x2717;</label>
                </td>
            </tr>
        }
        </tbody>
    </table>


    


@code {

    private List<Report> _reports;
    
    
    protected override async Task OnInitializedAsync() {
        try
        {
            _reports = await _reportService.GetAllReports();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    
    private async Task RemoveReport(Report item)
    {
        try
        {
            
            await _reportService.RemoveReport(item);
             _reports.Remove(item);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message); 
        }
    }


}
    
}